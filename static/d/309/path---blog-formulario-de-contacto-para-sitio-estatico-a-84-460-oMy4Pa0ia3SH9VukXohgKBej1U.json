{"data":{"markdownRemark":{"html":"<h1>Formulario de Contacto para Sitio Estático</h1>\n<p>Dado que este blog es un <em><em>sitio estático</em></em>, tuve que buscar alternativas para poder enviar un formulario de contacto sin la necesidad de tener backend o un servidor dedicado para eso.</p>\n<p><img src=\"formulario-de-contacto-para-sitio-estatico-1.png\" alt=\"búsqueda de google\"></p>\n<p>Obviamente al hacer la búsqueda en Google me encuentro con que la opción más usada y famosa es <a href=\"https://formspree.io\">Formspree</a>.</p>\n<blockquote>\n<h4>¿Qué es Formspree?</h4>\n<p>Connect your form to our endpoint and we’ll email you the submissions. No PHP, Javascript or sign up required —  <em>perfect for static sites!</em></p>\n</blockquote>\n<pre><code>&#x3C;form action=\"https://formspree.io/your@email.com\" method=\"POST\">\n    &#x3C;input type=\"text\" name=\"name\">  \n    &#x3C;input type=\"email\" name=\"_replyto\">\n    &#x3C;input type=\"submit\" value=\"Send\"> \n&#x3C;/form>\n</code></pre>\n<p>Así de sencillo, ya tendría funcionan un formulario de contacto en mi sitio estático, todo bien... pero no.</p>\n<p>Resulta que al enviar el formulario con Formspree, nos encontramos con esta maravilla.</p>\n<p>// insertar imagen de anti spam</p>\n<p>Un <strong><em>Captcha</em></strong> !!!!</p>\n<p>Definitivamente descartado, eliminar el anti-spam no es posible en el plan gratuito de formspree, entonces, ¿qué otra alternativa existe?.</p>\n<p>Bueno, respuestas a esta pregunta hay muchas, servicios que hacen exactamente lo mismo como:</p>\n<ul>\n<li><a href=\"https://formkeep.com/\">FormKeep</a></li>\n<li><a href=\"https://liveformhq.com/\">LiveForm</a></li>\n<li><a href=\"https://formcarry.com/\">FormCarry</a></li>\n<li><a href=\"https://www.formbucket.com/\">FormBucket</a></li>\n</ul>\n<p>Pero buscando alternativas encontré algo que me llamó mucho la atención; es posible utilizar Google Docs para simular un backend y guardar el registro de mensajes en el formulario de contacto en una planilla, para luego enviarlo a mi correo.</p>\n<p>¿Overkill? Totalmente, pero interesante <em>as fuck</em>.</p>\n<p>Así que decidí implementarlo en el sitio siguiendo las instrucciones del siguiente repositorio -> <a href=\"https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server\">https://github.com/dwyl/learn-to-send-email-via-google-script-html-no-server</a></p>\n<ol>\n<li>\n<p>Primero hay que copiar la <a href=\"https://docs.google.com/spreadsheets/d/1Bn4m6iA_Xch1zzhNvo_6CoQWqOAgwwkOWJKC-phHx2Q/copy\">siguiente planilla</a> en nuestra cuenta de Google Drive.</p>\n</li>\n<li>\n<p>Abrimos el <strong>Editor  de Secuencias de Comando</strong> haciendo click en <strong>Herramientas</strong> > <strong>Editor de Secuencias de Comando</strong>.</p>\n</li>\n<li>\n<p>Copiamos el siguiente <em>script</em> y editamos la variable <em>TO_ADDRESS</em>.</p>\n<pre><code>var TO_ADDRESS = \"mi@correo.com\";\n\nfunction doPost(e) {\n    try {\n        Logger.log(e);\n        MailApp.sendEmail(TO_ADDRESS, \"Formulario de Contacto Enviado\", JSON.stringify(e.parameters));\n        return ContentService.createTextOutput(\n            JSON.stringify({\"result\":\"success\", \"data\": JSON.stringify(e.parameters) }))\n                .setMimeType(ContentService.MimeType.JSON);\n    } catch(error) {\n        Logger.log(error);\n        return ContentService\n            .createTextOutput(JSON.stringify({\"result\":\"error\", \"error\": e}))\n            .setMimeType(ContentService.MimeType.JSON);\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>Guardar el script como una <em>nueva versión</em>, para hacerlo, ir a <strong>Archivo</strong> > <strong>Administrar Versiones</strong>, ahí escribes un título y guardas la nueva versión.</p>\n</li>\n<li>\n<p>Publicar el script, para ello, vamos a <strong>Publicar</strong> > <strong>Implementar como aplicación web...</strong>, siempre fijarse en que la <em>Versión del Proyecto</em> sea la última.</p>\n</li>\n<li>\n<p>Apretar <em>Actualizar</em> y aceptar los correspondientes permisos, el resultado será una <em>URI</em>, guardar para el próximo paso.</p>\n</li>\n</ol>\n<h3>HTML</h3>\n<p>Ahora que tenemos el formulario listo para recibir los mensajes, tenemos que implementarlo a un formulario html que debe cumplir con las siguientes condiciones:</p>\n<ul>\n<li>La clase del <code>&#x3C;form></code>debe ser <strong>gform</strong>.</li>\n<li>El atributo <em>name</em> de cada <code>&#x3C;input></code> debe ser el mismo que su correspondiente columna en la planilla de Google.</li>\n<li>El <em>action</em> del formulario debe ser la <em>URI</em> obtenida anteriormente.</li>\n</ul>\n<p>// insertar imagen de formulario lleno</p>\n<p>Con eso tenemos lista la integración, al probarlo obtuve algo como esto:</p>\n<pre><code>{\"result\":\"success\",\"data\":\"{\\\"correo\\\":[\\\"juanlatorreharcha@gmail.com\\\"],\\\"mensaje\\\":[\\\"Hola, este es un mensaje de prueba.\\\"],\\\"telefono\\\":[\\\"973362531\\\"],\\\"nombre\\\":[\\\"Juan Latorre\\\"]}\"}\n</code></pre>\n<p>// insertar imagen de correo recibido</p>\n<p>Perfecto, ahora solo falta mejorarlo un poco, no quiero que la persona que me contacta vea ese gran mensaje después de enviar el formulario.</p>\n<p>Para eso vamos a modificar un poco el script (primera parte, paso 2).</p>\n<p>Primero agrego la función <code>formatMailBody()</code> para mejorar un poco el <em>look</em> del correo recibido.</p>\n<pre><code>function formatMailBody(obj, order) {\n    var result = \"\";\n    if (!order) {\n        order = Object.keys(obj);\n    }\n    for (var idx in order) {\n        var key = order[idx];\n        result += \"&#x3C;h4 style='text-transform: capitalize; margin-bottom: 0'>\" + key + \"&#x3C;/h4>&#x3C;div>\" + sanitizeInput(obj[key]) + \"&#x3C;/div>\";\n    }\n    return result;\n}\n</code></pre>\n<p>Pero esta función utiliza a su vez, otra función que limpia o sanitiza el <em>input</em> ingresado por la persona que quiere contartarme; así que agregaremos la función <code>sanitizeInput</code>también.</p>\n<pre><code>function sanitizeInput(rawInput) {\n    var placeholder = HtmlService.createHtmlOutput(\" \");\n    placeholder.appendUntrusted(rawInput);\n    return placeholder.getContent();\n}\n</code></pre>\n<p>Y por supuesto teniendo dos nuevas funciones, hay que agregarlas a nuestro loop principal, que ahora queda así:</p>\n<pre><code>function doPost(e) {\n    try {\n        Logger.log(e);\n        record_data(e);\n        var mailData = e.parameters;\n        var orderParameter = e.parameters.formDataNameOrder;\n        var dataOrder;\n        if (orderParameter) {\n            dataOrder = JSON.parse(orderParameter);\n        }\n        var sendEmailTo = (typeof TO_ADDRESS !== \"undefined\") ? TO_ADDRESS : mailData.formGoogleSendEmail;\n        if (sendEmailTo) {\n            MailApp.sendEmail({\n                to: String(sendEmailTo),\n                subject: \"Contact form submitted\",\n                htmlBody: formatMailBody(mailData, dataOrder)\n            });\n        }\n        return ContentService.createTextOutput(\n            JSON.stringify({\"result\":\"success\",\n            \"data\": JSON.stringify(e.parameters) }))\n               .setMimeType(ContentService.MimeType.JSON);\n    } catch(error) {\n        Logger.log(error);\n        return ContentService\n            .createTextOutput(JSON.stringify({\"result\":\"error\", \"error\": error}))\n            .setMimeType(ContentService.MimeType.JSON);\n    }\n}\n</code></pre>\n<p>Sin embargo, nos falta la función para guardar los datos en la planilla creada al comienzo, por lo que la agregamos también.</p>\n<pre><code>function record_data(e) {\n  var lock = LockService.getDocumentLock();\n  lock.waitLock(30000);\n  \n  try {\n    Logger.log(JSON.stringify(e));\n    var doc = SpreadsheetApp.getActiveSpreadsheet();\n    var sheetName = e.parameters.formGoogleSheetName || \"responses\";\n    var sheet = doc.getSheetByName(sheetName);\n    \n    var oldHeader = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];\n    var newHeader = oldHeader.slice();\n    var fieldsFromForm = getDataColumns(e.parameters);\n    var row = [new Date()];\n    \n    // loop through the header columns\n    for (var i = 1; i &#x3C; oldHeader.length; i++) {\n      var field = oldHeader[i];\n      var output = getFieldFromData(field, e.parameters);\n      row.push(output);\n      \n      var formIndex = fieldsFromForm.indexOf(field);\n      if (formIndex > -1) {\n        fieldsFromForm.splice(formIndex, 1);\n      }\n    }\n    \n    for (var i = 0; i &#x3C; fieldsFromForm.length; i++) {\n      var field = fieldsFromForm[i];\n      var output = getFieldFromData(field, e.parameters);\n      row.push(output);\n      newHeader.push(field);\n    }\n    \n    var nextRow = sheet.getLastRow() + 1;\n    sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);\n\n    if (newHeader.length > oldHeader.length) {\n      sheet.getRange(1, 1, 1, newHeader.length).setValues([newHeader]);\n    }\n  }\n  catch(error) {\n    Logger.log(error);\n  }\n  finally {\n    lock.releaseLock();\n    return;\n  }\n\n}\n\nfunction getDataColumns(data) {\n  return Object.keys(data).filter(function(column) {\n    return !(column === 'formDataNameOrder' || column === 'formGoogleSheetName' || column === 'formGoogleSendEmail' || column === 'honeypot');\n  });\n}\n\nfunction getFieldFromData(field, data) {\n  var values = data[field] || '';\n  var output = values.join ? values.join(', ') : values;\n  return output;\n}\n</code></pre>\n<p>y <em>voilá</em>, tenemos un formulario de contacto estático.</p>","frontmatter":{"title":"Formulario de Contacto para Sitio Estático"}}},"pageContext":{"slug":"/blog/formulario-de-contacto-para-sitio-estatico/"}}