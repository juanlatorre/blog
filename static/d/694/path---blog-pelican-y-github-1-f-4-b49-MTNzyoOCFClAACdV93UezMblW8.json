{"data":{"markdownRemark":{"html":"<p>En este primer post en el blog, contaré todo el proceso de su creación utilizando <strong>Pelican</strong> y <strong>Github Pages</strong>.\nAntes de comenzar con el contenido real, a repasar conceptos.</p>\n<h2>¿Qué es Pelican?</h2>\n<p>Pelican, es un <em>static site generator</em> escrito en Python, no requiere base de datos ni lógica del lado del servidor.</p>\n<p>Algunas características que incluye son:</p>\n<ul>\n<li>Escribe tu contenido en reStructuredText, Markdown o AsciiDoc</li>\n<li>Compilar contenido completamente estático</li>\n<li>Temas editables con Jinja</li>\n<li>Soporte para multi lenguaje</li>\n<li>Atom/RSS Feed</li>\n<li>Resaltado de código</li>\n<li>Importar contenido desde Wordpres, Dotclear, RSS feeds, entre otros.</li>\n<li>Sistema de plugins modulares.</li>\n</ul>\n<p>Es un generador muy potente y a la vez muy simple, en el fondo <strong>it gets the job done</strong>.</p>\n<h2>Instalación y Configuración</h2>\n<p>Primero debemos instalar las herramientas, dependiendo de tu version de Python elige una.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> -H pip <span class=\"token function\">install</span> pelican\n$ <span class=\"token function\">sudo</span> -H pip3 <span class=\"token function\">install</span> pelican</code></pre></div>\n<p>Teniendo una cuenta en github, es necesario crear dos repositorios.</p>\n<ul>\n<li>usuario.github.io-src</li>\n<li>usuario.github.io</li>\n</ul>\n<p><em>usuario.github.io-src</em> será el encargado de contener el generador para luego compilar el blog y subir la parte estática al repo <em>usuario.github.io</em></p>\n<p>Para que esto sea posible tenemos que incluir el repositorio <em>usuario.github.io</em> como <a href=\"https://git-scm.com/book/es/v1/Las-herramientas-de-Git-Subm%C3%B3dulos\">submódulo</a> del repositorio <em>usuario.github.io-src</em></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git@github.com:usuario/usuario.github.io-src.git\n$ <span class=\"token function\">cd</span> usuario.github.io-src\n$ <span class=\"token function\">git</span> submodule add git@github.com:usuario/usuario.github.io.git output</code></pre></div>\n<p>Ahora que tenemos listos los repositorios necesarios y el submódulo, podemos comenzar con la herramienta de Pelican para generar el blog.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pelican-quickstart</code></pre></div>\n<p>Esta herramienta nos hará varias preguntas iniciales, las que importan son:</p>\n<ul>\n<li>Where do you want to create your new web site? <strong>(Enter)</strong></li>\n<li>URL prefix: <strong><a href=\"https://usuario.github.io\">https://usuario.github.io</a></strong></li>\n<li>Generate a Fabfile/Makefile: <strong>Yes</strong></li>\n<li>Upload mechanisms: <strong>Elegir No para todo menos Github Pages</strong></li>\n<li>Is this your personal page (usuario.github.io)?: <strong>Yes</strong></li>\n</ul>\n<p>Con esto la configuración inicial queda terminada, para editar el archivo de configuración haremos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ vim pelicanconf.py</code></pre></div>\n<p>Dentro podremos encontrar la variable <code class=\"language-text\">DELETE_OUTPUT_DIRECTORY = True</code>, debemos modificarlo para que sea falso: <code class=\"language-text\">DELETE_OUTPUT_DIRECTORY = False</code></p>\n<p>Esto evitará que se borre el contenido de la carpeta output cada vez que compilemos.</p>\n<h2>Creando contenido</h2>\n<p>Actualmente nuestra estructura de archivos queda parecida a esto:</p>\n<p>usuario.github.io-src\n│   develop_server.sh\n│   fabfile.py\n│   LICENSE\n│   Makefile\n│   pelicanconf.py\n│   publishconf.py\n│\n└───content\n│\n└───output</p>\n<p>Además puedes crear las carpetas <em>plugins</em> y <em>themes</em>, para más info respecto a esto mirar los docs sobre <a href=\"http://docs.getpelican.com/en/stable/pelican-themes.html\">temas</a> y <a href=\"http://docs.getpelican.com/en/stable/plugins.html\">plugins</a>.</p>\n<p>Para escribir nuestro primer post, vamos a crear un archivo <strong>markdown</strong> en la carpeta <em>content</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ touch content/primer-post.md</code></pre></div>\n<p>Dentro de este archivo, pondremos lo siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Title: Título del Post\nDate: YYYY-MM-DD HH:MM\nModified: YYYY-MM-DD HH:MM\nCategory: Categoría\nTags: Etiquetas, separadas, por, coma\nSlug: url-del-post\nAuthor: Nombre del Autor\nSummary: Resumen del contenido del post.</code></pre></div>\n<p>Aquí ya puedo comenzar a escribir el contenido del post en Markdown.</p>\n<p>Una vez que hemos creado nuestro primer post, podemos pasar a compilar.</p>\n<h2>Generando el sitio</h2>\n<p>Para generar el sitio tenemos varias <a href=\"http://docs.getpelican.com/en/stable/publish.html\">opciones</a>, yo utilizo el comando <del>~make</del>~.</p>\n<p>Primero debemos compilar el markdown en html plano, para eso:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make html</code></pre></div>\n<p>Esto generará contenido estático en la carpeta output, para comprobar si el blog funciona:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make serve</code></pre></div>\n<p>Abrirá un servidor en <a href=\"localhost:8000\">localhost:8000</a></p>\n<p>Si tu blog funciona perfectamente, es hora de publicarlo y hacer <em>commit</em> y <em>push</em> al repositorio que agregamos como <em>submódulo</em> en la carpeta <em>output</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make publish\n$ cd output\n$ git add .\n$ git commit -m &quot;Primer post&quot; &lt;--  usuario.github.io\n$ git push origin master\n$ cd ..\n$ git add .\n$ git commit -m &quot;Primer commit&quot;  &lt;-- usuario.github.io-src\n$ git push origin master</code></pre></div>\n<p>Ahora puedes visitar <em>usuario.github.io</em> y disfrutar del blog que acabas de crear.</p>\n<h2>Fin</h2>\n<p>Al final me dio flojera terminar el post, tenía pensado agregar una sección de cómo implementé el <strong>tema</strong> del blog y los <strong>plugins</strong> que estoy usando, así como <strong>uno que otro</strong> tip y script que hice para que todo sea más fluido, pero creo que todo eso quedará para otro día si ando con ganas de escribir un poco más.</p>\n<p>Si tienes alguna duda o comentario, o quieres saber más detalle de como crear un blog con <strong>Pelican</strong> puedes consultarme por Twitter o Email. Ando buscando una forma de generar comentarios estáticos sin depender de un servicio externo, creo que <a href=\"https://github.com/getpelican/pelican-plugins/tree/master/pelican_comment_system\">pelican-comment-system</a> es la solución pero no me he dado el tiempo de implementarlo, de todas formas si lo logro antes del post sobre plugins, fijo que estará el como <em>implementar</em>. Chao pescao.</p>","frontmatter":{"title":"Pelican & Github"}}},"pageContext":{"slug":"/blog/pelican-y-github/"}}