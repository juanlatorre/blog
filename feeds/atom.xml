<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Juan Latorre — Blog</title><link href="https://juanlatorre.github.io/" rel="alternate"></link><link href="https://juanlatorre.github.io/feeds/atom.xml" rel="self"></link><id>https://juanlatorre.github.io/</id><updated>2017-06-15T01:41:00-04:00</updated><entry><title>Concepto de Distribución de Paquetes en CuarzoOS</title><link href="https://juanlatorre.github.io/concepto-distribucion-paquetes-cuarzoos.html" rel="alternate"></link><published>2017-06-15T01:41:00-04:00</published><updated>2017-06-15T01:41:00-04:00</updated><author><name>Juan Latorre</name></author><id>tag:juanlatorre.github.io,2017-06-15:/concepto-distribucion-paquetes-cuarzoos.html</id><summary type="html">&lt;h2&gt;Ejemplo&lt;/h2&gt;
&lt;p&gt;Tomemos el ejemplo de la Aplicación cualquiera &lt;strong&gt;AppGenerica.cuarzo&lt;/strong&gt;
Esta tiene las siguientes características:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contiene un HASH único, identificador de aplicación, no puede ser cambiado.&lt;/li&gt;
&lt;li&gt;Es una imagen ISO, montable y solo de lectura (Read-Only).&lt;/li&gt;
&lt;li&gt;Contiene un zync-curl que permite la actualización por medio de Deltas que permiten descargar …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Ejemplo&lt;/h2&gt;
&lt;p&gt;Tomemos el ejemplo de la Aplicación cualquiera &lt;strong&gt;AppGenerica.cuarzo&lt;/strong&gt;
Esta tiene las siguientes características:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contiene un HASH único, identificador de aplicación, no puede ser cambiado.&lt;/li&gt;
&lt;li&gt;Es una imagen ISO, montable y solo de lectura (Read-Only).&lt;/li&gt;
&lt;li&gt;Contiene un zync-curl que permite la actualización por medio de Deltas que permiten descargar sólo el contenido actualizado de la App sin descargarla toda de nuevo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora, esta aplicación posee la siguiente estructura interna:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;libs/&lt;ul&gt;
&lt;li&gt;libAlgo-1.2.so&lt;/li&gt;
&lt;li&gt;libAlgo-1.3.so&lt;/li&gt;
&lt;li&gt;libOtraCosa-5.7.so&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bin/&lt;ul&gt;
&lt;li&gt;binarios&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;other/&lt;ul&gt;
&lt;li&gt;Lo que sea que necesite esa app&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AppRun&lt;/li&gt;
&lt;li&gt;zync-curl&lt;/li&gt;
&lt;li&gt;default.desktop&lt;/li&gt;
&lt;li&gt;default.png&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Explicación&lt;/h2&gt;
&lt;p&gt;La carpeta &lt;strong&gt;libs&lt;/strong&gt; contiene las librerias necesarias de la aplicación (obviando las que se incluyen en el sistema), estas librerias tiene un HASH único designado a cada archivo, al momento de correr la Aplicación por primera vez, todas estas librerias se mueven a la carpeta física &lt;strong&gt;/usr/share/crzlibs/&lt;/strong&gt; donde se almacenarán las librerias externas al sistema, al comprobar que una librería ya existe, se comprueba que el HASH corresponde, de ser así se utiliza y de no ser así se reemplaza con otro nombre (Ej: &lt;em&gt;libAlgo-1.2-good.so&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;La carpeta &lt;strong&gt;bin&lt;/strong&gt; contiene los binarios de la aplicación&lt;/p&gt;
&lt;p&gt;La carpeta &lt;strong&gt;other&lt;/strong&gt; puede contener lo que sea que esa app utilice&lt;/p&gt;
&lt;p&gt;El script &lt;strong&gt;AppRun&lt;/strong&gt; es el encargado de correr el binario al montar la ISO, a la vez, cada vez que la aplicación es abierta, comprueba el HASH único de esta, si algun archivo ha sido modificado (por un externo o usuario) o está corrupto, avisa al usuario que &lt;em&gt;"Esta aplicación puede estar corrupta o modificada, lo que es peligroso para su equipo".&lt;/em&gt; De ser este el caso se presentarán 4 opciones en pantalla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eliminar aplicación.&lt;/li&gt;
&lt;li&gt;Autoarreglar (por medio de zync-curl se descarga el archivo corrupto de nuevo y se arregla a si misma)&lt;/li&gt;
&lt;li&gt;Abrir de todos modos (inseguro)&lt;/li&gt;
&lt;li&gt;Cancelar&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Preferencias y archivos residuales&lt;/h2&gt;
&lt;p&gt;Cada aplicación está en la obligación de seguir las especificaciones respecto a archivos residuales. Todos los archivos que la aplicación quiera escribir en el disco, deberán escribirse en:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/.prefs/cuarzo/APP/*
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Desinstalación o eliminación&lt;/h2&gt;
&lt;p&gt;El script &lt;strong&gt;AppRun&lt;/strong&gt; además tiene la facultad de detectar cuando una aplicación se mueve se su correspondiente ubicación a la papelera, de ser así se considera eliminación y por ende elimina automáticamente todos los archivos residuales ubicados en el path mencionado posteriormente; NO así las librerias, que se mantendrán en su lugar a pesar de la eliminación de la aplicación.&lt;/p&gt;</content><category term="concepto"></category><category term="distribucion"></category><category term="paquetes"></category><category term="linux"></category><category term="cuarzoOS"></category><category term="cuarzo"></category></entry><entry><title>Pelican &amp; Github</title><link href="https://juanlatorre.github.io/pelican-y-github.html" rel="alternate"></link><published>2017-05-10T19:35:00-03:00</published><updated>2017-05-10T19:35:00-03:00</updated><author><name>Juan Latorre</name></author><id>tag:juanlatorre.github.io,2017-05-10:/pelican-y-github.html</id><summary type="html">&lt;p&gt;En este primer post en el blog, contaré todo el proceso de su creación utilizando &lt;strong&gt;Pelican&lt;/strong&gt; y &lt;strong&gt;Github Pages&lt;/strong&gt;.
Antes de comenzar con el contenido real, a repasar conceptos.&lt;/p&gt;
&lt;h2&gt;¿Qué es Pelican?&lt;/h2&gt;
&lt;p&gt;Pelican, es un &lt;em&gt;static site generator&lt;/em&gt; escrito en Python, no requiere base de datos ni lógica del lado …&lt;/p&gt;</summary><content type="html">&lt;p&gt;En este primer post en el blog, contaré todo el proceso de su creación utilizando &lt;strong&gt;Pelican&lt;/strong&gt; y &lt;strong&gt;Github Pages&lt;/strong&gt;.
Antes de comenzar con el contenido real, a repasar conceptos.&lt;/p&gt;
&lt;h2&gt;¿Qué es Pelican?&lt;/h2&gt;
&lt;p&gt;Pelican, es un &lt;em&gt;static site generator&lt;/em&gt; escrito en Python, no requiere base de datos ni lógica del lado del servidor.&lt;/p&gt;
&lt;p&gt;Algunas características que incluye son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escribe tu contenido en &lt;strong&gt;reStructuredText&lt;/strong&gt;, &lt;strong&gt;Markdown&lt;/strong&gt; o &lt;strong&gt;AsciiDoc&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Compilar contenido completamente estático&lt;/li&gt;
&lt;li&gt;Temas editables con &lt;strong&gt;Jinja&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Soporte para multi lenguaje&lt;/li&gt;
&lt;li&gt;Atom/RSS Feed&lt;/li&gt;
&lt;li&gt;Resaltado de código&lt;/li&gt;
&lt;li&gt;Importar contenido desde Wordpres, Dotclear, RSS feeds, entre otros.&lt;/li&gt;
&lt;li&gt;Sistema de plugins modulares.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es un generador muy potente y a la vez muy simple, en el fondo &lt;strong&gt;it gets the job done&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Instalación y Configuración&lt;/h2&gt;
&lt;p&gt;Primero debemos instalar las herramientas, dependiendo de tu version de Python elige una.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -H pip install pelican
$ sudo -H pip3 install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Teniendo una cuenta en github, es necesario crear dos repositorios.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;usuario.github.io-src&lt;/p&gt;
&lt;p&gt;usuario.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;usuario.github.io-src&lt;/em&gt; será el encargado de contener el generador para luego compilar el blog y subir la parte estática al repo &lt;em&gt;usuario.github.io&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que esto sea posible tenemos que incluir el repositorio &lt;em&gt;usuario.github.io&lt;/em&gt; como &lt;a href="https://git-scm.com/book/es/v1/Las-herramientas-de-Git-Subm%C3%B3dulos"&gt;submódulo&lt;/a&gt; del repositorio &lt;em&gt;usuario.github.io-src&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:usuario/usuario.github.io-src.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; usuario.github.io-src
$ git submodule add git@github.com:usuario/usuario.github.io.git output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora que tenemos listos los repositorios necesarios y el submódulo, podemos comenzar con la herramienta de Pelican para generar el blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esta herramienta nos hará varias preguntas iniciales, las que importan son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Where do you want to create your new web site? &lt;strong&gt;(Enter)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;URL prefix: &lt;strong&gt;https://usuario.github.io&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Generate a Fabfile/Makefile: &lt;strong&gt;Yes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Upload mechanisms: &lt;strong&gt;Elegir No para todo menos Github Pages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Is this your personal page (usuario.github.io)?: &lt;strong&gt;Yes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con esto la configuración inicial queda terminada, para editar el archivo de configuración haremos:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vim pelicanconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dentro podremos encontrar la variable &lt;code&gt;DELETE_OUTPUT_DIRECTORY = True&lt;/code&gt;, debemos modificarlo para que sea falso: &lt;code&gt;DELETE_OUTPUT_DIRECTORY = False&lt;/code&gt;.
Esto evitará que se borre el contenido de la carpeta &lt;em&gt;output&lt;/em&gt; cada vez que compilemos.&lt;/p&gt;
&lt;h2&gt;Creando contenido&lt;/h2&gt;
&lt;p&gt;Actualmente nuestra estructura de archivos queda parecida a esto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;usuario.github.io-src
│   develop_server.sh
│   fabfile.py
│   LICENSE
│   Makefile
│   pelicanconf.py
│   publishconf.py
│
└───content
│
└───output
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Además puedes crear las carpetas &lt;em&gt;plugins&lt;/em&gt; y &lt;em&gt;themes&lt;/em&gt;, para más info respecto a esto mirar los docs sobre &lt;a href="http://docs.getpelican.com/en/stable/pelican-themes.html"&gt;temas&lt;/a&gt; y &lt;a href="http://docs.getpelican.com/en/stable/plugins.html"&gt;plugins&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para escribir nuestro primer post, vamos a crear un archivo &lt;strong&gt;markdown&lt;/strong&gt; en la carpeta &lt;em&gt;content&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ touch content/primer-post.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dentro de este archivo, pondremos lo siguiente:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Título&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;YYYY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DD&lt;/span&gt; &lt;span class="n"&gt;HH&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;YYYY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DD&lt;/span&gt; &lt;span class="n"&gt;HH&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;MM&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Categoría&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Etiquetas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separadas&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;por&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coma&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;del&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Nombre&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;Autor&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Resumen&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;contenido&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Aquí&lt;/span&gt; &lt;span class="n"&gt;ya&lt;/span&gt; &lt;span class="n"&gt;puedo&lt;/span&gt; &lt;span class="n"&gt;comenzar&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;escribir&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="n"&gt;contenido&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Una vez que hemos creado nuestro primer post, podemos pasar a compilar.&lt;/p&gt;
&lt;h2&gt;Generando el sitio&lt;/h2&gt;
&lt;p&gt;Para generar el sitio tenemos varias &lt;a href="http://docs.getpelican.com/en/stable/publish.html"&gt;opciones&lt;/a&gt;, yo utilizo el comando ~~~make~~~.&lt;/p&gt;
&lt;p&gt;Primero debemos compilar el markdown en html plano, para eso:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esto generará contenido estático en la carpeta &lt;em&gt;output&lt;/em&gt;, para comprobar si el blog funciona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Abrirá un servidor en &lt;a href="http://localhost:8000"&gt;localhost:8000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si tu blog funciona perfectamente, es hora de publicarlo y hacer &lt;em&gt;commit y push&lt;/em&gt; al repositorio que agregamos como &lt;em&gt;submódulo&lt;/em&gt; en la carpeta &lt;em&gt;output&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make publish

$ &lt;span class="nb"&gt;cd&lt;/span&gt; output
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Primer post&amp;quot;&lt;/span&gt; &amp;lt;--  usuario.github.io
$ git push origin master

$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Primer commit&amp;quot;&lt;/span&gt;  &amp;lt;-- usuario.github.io-src
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ahora puedes visitar &lt;a href="https://usuario.github.io"&gt;usuario.github.io&lt;/a&gt; y disfrutar del blog que acabas de crear.&lt;/p&gt;
&lt;h2&gt;Fin&lt;/h2&gt;
&lt;p&gt;Al final me dio flojera terminar el post, tenía pensado agregar una sección de cómo implementé el &lt;strong&gt;tema&lt;/strong&gt; del blog y los &lt;strong&gt;plugins&lt;/strong&gt; que estoy usando, así como &lt;strong&gt;uno que otro&lt;/strong&gt; tip y script que hice para que todo sea más fluido, pero creo que todo eso quedará para otro día si ando con ganas de escribir un poco más.&lt;/p&gt;
&lt;p&gt;Si tienes alguna duda o comentario, o quieres saber más detalle de como crear un blog con &lt;strong&gt;Pelican&lt;/strong&gt; puedes consultarme por Twitter o Email. Ando buscando una forma de generar comentarios estáticos sin depender de un servicio externo, creo que &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/pelican_comment_system"&gt;pelican-comment-system&lt;/a&gt; es la solución pero no me he dado el tiempo de implementarlo, de todas formas si lo logro antes del post sobre plugins, fijo que estará el &lt;em&gt;como implementar&lt;/em&gt;. Chao pescao.&lt;/p&gt;</content><category term="pelican"></category><category term="github"></category><category term="python"></category><category term="tutorial"></category></entry></feed>